#!/bin/sh

# Oyster - Embedded shell based static blog generator 

# The MIT License (MIT)
#
# Copyright (c) 2016 Sunaina Pai
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


VERSION=0.1.0-DEV
AUTHOR="Sunaina Pai"
COPYRIGHT="Copyright (c) 2016 $AUTHOR"
SUPPORT_URL="https://github.com/sunainapai/oyster/issues"
NAME=${0##*/}


NL="
"


# DESCRIPTION
#   Read file, find and execute shell commands embedded in text and
#   replace each command with the standard output written by the
#   command. If the file uses a template, render it recursively such
#   that the 'content' command is replaced with the output of the file.
#   The output generated due to the last template processed is the
#   output of this function.
#
# OPERANDS
#   1. File to be rendered.
#
# STDIN
#   The standard input is used as file if no file operand is specified.
#
# STDOUT
#   The rendered file is written to standard output.
#
# STDERR
#   Any errors encountered while rendering are written to standard
#   error.
#
# EXIT STATUS
#   0 If the file is rendered successfully.
#   1 If the rendering failed.
render()
{
    if [ -n "$1" ]
    then
        _eval_embedded_shell < "$1" > /tmp/content.html
    else
        _eval_embedded_shell <<eof > /tmp/content.html
$(cat)
eof
    fi

    _content=$(cat /tmp/content.html)
    while [ -n "$_template" ]
    do
        template_file=$_template
        # Store the file name to execute, unset _template so that it can
        # be defined afresh in next execution. If the next execution
        # does not define a template, _template variable remains unset
        # which ends the loop.
        unset _template
        _eval_embedded_shell "$template_file" > /tmp/content.html
        _content=$(cat /tmp/content.html)
    done

    # Introduce new line at the end of file to overcome noeol.
    printf "%s\n" "$_content"

    unset _content
    unset template_file
}


# TODO comment
_eval_embedded_shell()
{
    while IFS= read -r _line
    do

        # Tokenize input: For each line in the input file, place each
        # occurrence of shell code, e.g. "{{ date }}", on its own line.
        # Each output line contains a single token (i.e. static text or
        # shell code). These lines of tokens are fed to the inner while
        # loop.
        printf "%s" "$_line" | sed "s/{{/\\$NL{{/g" |
                               sed "s/}}/}}\\$NL/g" > /tmp/tokens.html

        tokens=$(cat /tmp/tokens.html)

        # Loop over the each line of tokenized input and evaluate the
        # shell-script-tokens.
        # Set IFS to nothing, to preserve indentation, whitespaces etc.
        while IFS= read -r _token 
        do
            printf "%s" "$_token" | grep -q "^{{" && mode=code || mode=text

            if [ $mode = code ]
            then
                # While tokenizing, we inserted a newline before each
                # shell script token. We undo that by printing the
                # output of the evaluated shell script without any
                # preceding newline.
                code=$(printf "%s" "$_token" | sed "s/.*{{\(.*\)}}.*/\1/")
                eval "$code"
            else
                printf "%s" "$_token"
            fi

# Do not indent anything within here-document to workaround a yash bug
# where read command does not remove leading IFS. Ensure that input to
# read command does not contain leading IFS.
        done <<eof
$(printf %s "$tokens")
eof
    # Write a new line as we have reached the end of the original source
    # code line.
    printf "\n"
    done

    unset mode
    unset code
}


# TODO comment
template()
{
    _template=$1
}


# TODO comment
content()
{
    printf %s "$_content"
}

# TODO: provide a command to loop over files and render them
# TODO: expose generate as render; fix generate rendering bug

# TODO: write tests especially write test for preserving indentation
# TODO: support arbitrary configuration file ex. site.sh, site, etc.
# TODO: change_tags
# TODO: out

# TODO comment
main()
{
    parse_arguments "$@"
    build_site
    if [ "$serve" = yes ]
    then
        serve_site
    fi
}


# TODO comment
parse_arguments()
{
    while [ $# -gt 0 ]
    do
        case $1 in
            -h | --help)
                show_help
                exit
                ;;
            -v | --version)
                show_version
                exit
                ;;
            -s | --serve)
                serve=yes
                shift
                ;;
            -*)
                # TODO make an error function to print $NAME: arg1 arg2 ... >&2
                printf "Unknown option '%s'" "$1"
                exit
                ;;
            *)
                # TODO call the error function
                printf "Unknown argument '%s'" "$1"
                exit
                ;;
        esac
    done
}


# TODO comment
show_help()
{
    cat <<eof
Usage: $NAME [-s] [-h] [-v]

TODO: write a short description

Options:
  -s, --serve    Serve site with Python HTTP server.
  -h, --help     Display this help and exit.
  -v, --version  Display version information and exit.

Report bugs to <$SUPPORT_URL>.
eof
}


# Show version and copyright.
show_version()
{
    cat <<eof
Oyster $VERSION
$COPYRIGHT

This is free and open source software. You can use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of it,
under the terms of the MIT License.

This software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND,
express or implied. See the MIT License for details.
eof
}

get_post_id()
{
    post_file=$1
    post_id=${post_file##*/????-??-??-}
    post_id="${post_id%.html}"
    printf %s "$post_id"

    unset post_file
    unset post_id
}

get_post_date()
{
    printf %s "${1##*/}" | sed "s/.*\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\).*/\1/"
}

# Render posts.
#
# OPERANDS
#   1. Source directory.
#   2. File pattern.
#   3. Template to use to render files in source directory.
#   4. Output directory where rendered files are written.
render_dir()
{
    find "$1" -name "$2" |
    while read -r file
    do
        # Create directory for post's index.html.
        target_path="$4"/$(get_post_id "$file")/index.html
        mkdir -p "$(dirname "$target_path")"
        post_create_date=$(get_post_date "$file")
        echo Rendering "$file" ...
        template "$3"
        unset post_title
        render "$file" > "$target_path" 
    done
}

# TODO comment
build_site()
{
    rm -rf _site
    # TODO create _site
    . ./site.sh
}


# TODO comment
serve_site()
{
    cd _site
    # TODO try python -m SimpleHTTPServer, then python3, else error
    python3 -m http.server
}


# TODO comment
# Test files set variable import to yes in the environment.
[ "$import" != yes ] && main "$@"
